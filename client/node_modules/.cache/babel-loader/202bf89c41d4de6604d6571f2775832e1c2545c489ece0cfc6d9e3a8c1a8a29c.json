{"ast":null,"code":"var _jsxFileName = \"D:\\\\xoaClientt\\\\V4\\\\client\\\\src\\\\components\\\\shared\\\\AIChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport api from '../../configs/Apis';\nimport './AIChatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AIChatbot = ({\n  isOpen,\n  onClose,\n  userId = null\n}) => {\n  _s();\n  const [sessionId, setSessionId] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Auto scroll to bottom\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Khởi tạo chat session khi mở chatbot\n  useEffect(() => {\n    if (isOpen && !sessionId) {\n      startNewChat();\n    }\n  }, [isOpen]);\n\n  // Focus input khi mở chatbot\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => inputRef.current.focus(), 100);\n    }\n  }, [isOpen]);\n  const startNewChat = async () => {\n    try {\n      setIsLoading(true);\n      const response = await api.post(`/chatbot/start`, {\n        userId: userId\n      });\n      if (response.data.success) {\n        setSessionId(response.data.sessionId);\n        setMessages([response.data.initialMessage]);\n      }\n    } catch (error) {\n      console.error('Error starting chat:', error);\n      setMessages([{\n        role: 'system',\n        content: 'Xin lỗi, có lỗi xảy ra khi khởi tạo chat. Vui lòng thử lại.',\n        timestamp: new Date()\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim() || !sessionId || isLoading) return;\n    const userMessage = {\n      role: 'user',\n      content: inputMessage.trim(),\n      timestamp: new Date()\n    };\n\n    // Thêm tin nhắn của user vào chat\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n    try {\n      const response = await api.post(`/chatbot/message`, {\n        sessionId: sessionId,\n        message: userMessage.content,\n        userId: userId\n      });\n      if (response.data.success) {\n        const aiMessage = {\n          role: 'assistant',\n          content: response.data.response,\n          timestamp: new Date(),\n          metadata: {\n            intent: response.data.intent,\n            confidence: response.data.confidence,\n            entities: response.data.entities\n          }\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Xin lỗi, có lỗi xảy ra. Vui lòng thử lại.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      sendMessage(e);\n    }\n  };\n  const formatMessage = message => {\n    // Xử lý xuống dòng trong tin nhắn\n    return message.content.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [line, index < message.content.split('\\n').length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 68\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this));\n  };\n  const getMessageTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('vi-VN', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const getIntentIcon = intent => {\n    const intentIcons = {\n      'product_search': '🔍',\n      'category_info': '📂',\n      'price_inquiry': '💰',\n      'stock_check': '📦',\n      'product_comparison': '⚖️',\n      'recommendation': '💡',\n      'greeting': '👋',\n      'farewell': '👋',\n      'general_question': '❓'\n    };\n    return intentIcons[intent] || '💬';\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-chatbot-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-chatbot-container\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-chatbot-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ai-icon\",\n            children: \"\\uD83E\\uDD16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"AI Tr\\u1EE3 l\\xFD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ai-chatbot-close\",\n          onClick: onClose,\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-chatbot-messages\",\n        children: [messages.map((message, index) => {\n          var _message$metadata;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `ai-message ${message.role === 'user' ? 'user' : 'assistant'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-message-content\",\n              children: [message.role === 'assistant' && ((_message$metadata = message.metadata) === null || _message$metadata === void 0 ? void 0 : _message$metadata.intent) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ai-message-intent\",\n                children: [getIntentIcon(message.metadata.intent), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"intent-text\",\n                  children: message.metadata.intent.replace('_', ' ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ai-message-text\",\n                children: formatMessage(message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ai-message-time\",\n                children: getMessageTime(message.timestamp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this);\n        }), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-message assistant\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-message-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ai-typing\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"ai-chatbot-input-form\",\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ref: inputRef,\n            type: \"text\",\n            value: inputMessage,\n            onChange: e => setInputMessage(e.target.value),\n            onKeyPress: handleKeyPress,\n            placeholder: \"Nh\\u1EADp c\\xE2u h\\u1ECFi c\\u1EE7a b\\u1EA1n...\",\n            disabled: isLoading || !sessionId,\n            className: \"ai-message-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: isLoading || !sessionId || !inputMessage.trim(),\n            className: \"ai-send-button\",\n            children: isLoading ? '⏳' : '📤'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-quick-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setInputMessage('Tìm sản phẩm'),\n            className: \"ai-quick-action-btn\",\n            children: \"\\uD83D\\uDD0D T\\xECm s\\u1EA3n ph\\u1EA9m\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setInputMessage('Xem danh mục'),\n            className: \"ai-quick-action-btn\",\n            children: \"\\uD83D\\uDCC2 Danh m\\u1EE5c\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setInputMessage('Đề xuất sản phẩm'),\n            className: \"ai-quick-action-btn\",\n            children: \"\\uD83D\\uDCA1 \\u0110\\u1EC1 xu\\u1EA5t\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-chatbot-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"AI \\u0111\\u01B0\\u1EE3c hu\\u1EA5n luy\\u1EC7n v\\u1EDBi d\\u1EEF li\\u1EC7u s\\u1EA3n ph\\u1EA9m th\\u1EF1c t\\u1EBF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(AIChatbot, \"+1ntpZQNisx6EUFgKkIlfXEfa9U=\");\n_c = AIChatbot;\nexport default AIChatbot;\nvar _c;\n$RefreshReg$(_c, \"AIChatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","jsxDEV","_jsxDEV","AIChatbot","isOpen","onClose","userId","_s","sessionId","setSessionId","messages","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","isTyping","setIsTyping","messagesEndRef","inputRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","startNewChat","setTimeout","focus","response","post","data","success","initialMessage","error","console","role","content","timestamp","Date","sendMessage","e","preventDefault","trim","userMessage","prev","message","aiMessage","metadata","intent","confidence","entities","errorMessage","handleKeyPress","key","shiftKey","formatMessage","split","map","line","index","children","length","fileName","_jsxFileName","lineNumber","columnNumber","getMessageTime","toLocaleTimeString","hour","minute","getIntentIcon","intentIcons","className","onClick","stopPropagation","_message$metadata","replace","ref","onSubmit","type","value","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["D:/xoaClientt/V4/client/src/components/shared/AIChatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport api from '../../configs/Apis';\r\nimport './AIChatbot.css';\r\n\r\nconst AIChatbot = ({ isOpen, onClose, userId = null }) => {\r\n    const [sessionId, setSessionId] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n    const inputRef = useRef(null);\r\n\r\n    // Auto scroll to bottom\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    // Khởi tạo chat session khi mở chatbot\r\n    useEffect(() => {\r\n        if (isOpen && !sessionId) {\r\n            startNewChat();\r\n        }\r\n    }, [isOpen]);\r\n\r\n    // Focus input khi mở chatbot\r\n    useEffect(() => {\r\n        if (isOpen && inputRef.current) {\r\n            setTimeout(() => inputRef.current.focus(), 100);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const startNewChat = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await api.post(`/chatbot/start`, {\r\n                userId: userId\r\n            });\r\n\r\n            if (response.data.success) {\r\n                setSessionId(response.data.sessionId);\r\n                setMessages([response.data.initialMessage]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error starting chat:', error);\r\n            setMessages([{\r\n                role: 'system',\r\n                content: 'Xin lỗi, có lỗi xảy ra khi khởi tạo chat. Vui lòng thử lại.',\r\n                timestamp: new Date()\r\n            }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!inputMessage.trim() || !sessionId || isLoading) return;\r\n\r\n        const userMessage = {\r\n            role: 'user',\r\n            content: inputMessage.trim(),\r\n            timestamp: new Date()\r\n        };\r\n\r\n        // Thêm tin nhắn của user vào chat\r\n        setMessages(prev => [...prev, userMessage]);\r\n        setInputMessage('');\r\n        setIsTyping(true);\r\n\r\n        try {\r\n            const response = await api.post(`/chatbot/message`, {\r\n                sessionId: sessionId,\r\n                message: userMessage.content,\r\n                userId: userId\r\n            });\r\n\r\n            if (response.data.success) {\r\n                const aiMessage = {\r\n                    role: 'assistant',\r\n                    content: response.data.response,\r\n                    timestamp: new Date(),\r\n                    metadata: {\r\n                        intent: response.data.intent,\r\n                        confidence: response.data.confidence,\r\n                        entities: response.data.entities\r\n                    }\r\n                };\r\n\r\n                setMessages(prev => [...prev, aiMessage]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n            const errorMessage = {\r\n                role: 'assistant',\r\n                content: 'Xin lỗi, có lỗi xảy ra. Vui lòng thử lại.',\r\n                timestamp: new Date()\r\n            };\r\n            setMessages(prev => [...prev, errorMessage]);\r\n        } finally {\r\n            setIsTyping(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            sendMessage(e);\r\n        }\r\n    };\r\n\r\n    const formatMessage = (message) => {\r\n        // Xử lý xuống dòng trong tin nhắn\r\n        return message.content.split('\\n').map((line, index) => (\r\n            <span key={index}>\r\n                {line}\r\n                {index < message.content.split('\\n').length - 1 && <br />}\r\n            </span>\r\n        ));\r\n    };\r\n\r\n    const getMessageTime = (timestamp) => {\r\n        return new Date(timestamp).toLocaleTimeString('vi-VN', {\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        });\r\n    };\r\n\r\n    const getIntentIcon = (intent) => {\r\n        const intentIcons = {\r\n            'product_search': '🔍',\r\n            'category_info': '📂',\r\n            'price_inquiry': '💰',\r\n            'stock_check': '📦',\r\n            'product_comparison': '⚖️',\r\n            'recommendation': '💡',\r\n            'greeting': '👋',\r\n            'farewell': '👋',\r\n            'general_question': '❓'\r\n        };\r\n        return intentIcons[intent] || '💬';\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n        <div className=\"ai-chatbot-overlay\" onClick={onClose}>\r\n            <div className=\"ai-chatbot-container\" onClick={(e) => e.stopPropagation()}>\r\n                {/* Header */}\r\n                <div className=\"ai-chatbot-header\">\r\n                    <div className=\"ai-chatbot-title\">\r\n                        <span className=\"ai-icon\">🤖</span>\r\n                        <span>AI Trợ lý</span>\r\n                    </div>\r\n                    <button className=\"ai-chatbot-close\" onClick={onClose}>\r\n                        ✕\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Messages Container */}\r\n                <div className=\"ai-chatbot-messages\">\r\n                    {messages.map((message, index) => (\r\n                        <div\r\n                            key={index}\r\n                            className={`ai-message ${message.role === 'user' ? 'user' : 'assistant'}`}\r\n                        >\r\n                            <div className=\"ai-message-content\">\r\n                                {message.role === 'assistant' && message.metadata?.intent && (\r\n                                    <div className=\"ai-message-intent\">\r\n                                        {getIntentIcon(message.metadata.intent)}\r\n                                        <span className=\"intent-text\">\r\n                                            {message.metadata.intent.replace('_', ' ')}\r\n                                        </span>\r\n                                    </div>\r\n                                )}\r\n                                <div className=\"ai-message-text\">\r\n                                    {formatMessage(message)}\r\n                                </div>\r\n                                <div className=\"ai-message-time\">\r\n                                    {getMessageTime(message.timestamp)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    {isTyping && (\r\n                        <div className=\"ai-message assistant\">\r\n                            <div className=\"ai-message-content\">\r\n                                <div className=\"ai-typing\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n\r\n                {/* Input Form */}\r\n                <form className=\"ai-chatbot-input-form\" onSubmit={sendMessage}>\r\n                    <div className=\"ai-input-container\">\r\n                        <input\r\n                            ref={inputRef}\r\n                            type=\"text\"\r\n                            value={inputMessage}\r\n                            onChange={(e) => setInputMessage(e.target.value)}\r\n                            onKeyPress={handleKeyPress}\r\n                            placeholder=\"Nhập câu hỏi của bạn...\"\r\n                            disabled={isLoading || !sessionId}\r\n                            className=\"ai-message-input\"\r\n                        />\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading || !sessionId || !inputMessage.trim()}\r\n                            className=\"ai-send-button\"\r\n                        >\r\n                            {isLoading ? '⏳' : '📤'}\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    {/* Quick Actions */}\r\n                    <div className=\"ai-quick-actions\">\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setInputMessage('Tìm sản phẩm')}\r\n                            className=\"ai-quick-action-btn\"\r\n                        >\r\n                            🔍 Tìm sản phẩm\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setInputMessage('Xem danh mục')}\r\n                            className=\"ai-quick-action-btn\"\r\n                        >\r\n                            📂 Danh mục\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setInputMessage('Đề xuất sản phẩm')}\r\n                            className=\"ai-quick-action-btn\"\r\n                        >\r\n                            💡 Đề xuất\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n\r\n                {/* Footer */}\r\n                <div className=\"ai-chatbot-footer\">\r\n                    <small>AI được huấn luyện với dữ liệu sản phẩm thực tế</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AIChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}