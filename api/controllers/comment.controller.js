const Comment = require("../../models/comment.model");
const Product = require("../../models/product.model");
const User = require("../../models/user.model");
const { commentLimiter } = require("../../middlewares/rateLimiter");

// H√†m ki·ªÉm tra comment c√≥ vi ph·∫°m hay kh√¥ng
function checkCommentViolation(content) {
  // Danh s√°ch t·ª´ kh√≥a c·∫•m
  const bannedWords = [
    // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (c√≥ d·∫•u)
    'ƒë·ªãt', 'ƒë·ª•', 'l·ªìn', 'c·∫∑c', 'ƒë√©o', 'ƒëcm', 'v√£i l*n', 'v√£i l·ªìn', 'vcl', 'loz', 'clgt',
    'm√° m√†y', 'm·∫π m√†y', 'ƒë·ªì ngu', '√≥c ch√≥', 'n√£o ch√≥', 'ngu v√£i', 'ngu nh∆∞ b√≤', 'ngu nh∆∞ l·ª£n',
  
    // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (kh√¥ng d·∫•u/l√°ch lu·∫≠t)
    'dit', 'du', 'lon', 'cac', 'deo', 'dcm', 'vl', 'loz', 'oc cho', 'oc lon', 'oc heo', 'dm', 'cl',
  
    // üîû Ch·ª≠i t·ª•c ti·∫øng Anh
    'fuck', 'shit', 'bitch', 'asshole', 'dick', 'pussy', 'bastard', 'slut', 'faggot', 'moron',
  
    // üö´ Spam, l·ª´a ƒë·∫£o, gian l·∫≠n
    'spam', 'scam', 'l·ª´a ƒë·∫£o', 'l·ª´a g·∫°t', 'gian th∆∞∆°ng', 'b·ªãp b·ª£m', 'treo ƒë·∫ßu d√™', 'b√°n th·ªãt ch√≥', 'h√†ng fake', 'h√†ng gi·∫£', 'ƒë·∫°o nh√°i',
  
    // üëé Ch√™ bai s·∫£n ph·∫©m n·∫∑ng
    'r√°c', 'r√°c r∆∞·ªüi', 'ƒë·ªì b·ªè ƒëi', 'ph·∫ø ph·∫©m', 'ƒë·ªì ƒë·ªÉu', 'h√†ng l·ªüm', 't·ªá', 'qu√° t·ªá', 'c·ª±c k·ª≥ t·ªá', 
    'k√©m ch·∫•t l∆∞·ª£ng', 'kh√¥ng ra g√¨', 'kh√¥ng x·ª©ng ƒë√°ng', 'r·∫ª ti·ªÅn', 'kh√¥ng ƒë√°ng ti·ªÅn', 'ph√≠ ti·ªÅn',
    'd·ªü ·∫πc', 'ch√°n', 'v·ªõ v·∫©n', 'x·∫•u v√£i', 'x·∫•u v√£i l', 'x·∫•u nh∆∞ ch√≥', 'x·∫•u nh∆∞ cc', 'x·∫•u kinh t·ªüm',
    'bu·ªìn n√¥n', 'th·∫£m h·ªça', 'thi·∫øt k·∫ø nh∆∞ ƒë√πa', 'ƒë·ªânh cao c·ªßa t·ªá h·∫°i', 's·∫£n ph·∫©m c·ªßa tr√≤ ƒë√πa',
    'mua 1 l·∫ßn ch·ª´a c·∫£ ƒë·ªùi', 'ti·ªÅn m·∫•t t·∫≠t mang', 'nh∆∞ c·ª©c', 'nh∆∞ c·ª©t', 'nh∆∞ cc', 'nh∆∞ loz', 'nh∆∞ l',
    'h√£m l', 'h√£m v√£i', 'th·∫•t v·ªçng', 'c·ª±c k·ª≥ th·∫•t v·ªçng', 'kh√°c m√¥ t·∫£', 'kh√°c xa th·ª±c t·∫ø',
  
    // ü§° M·ªâa mai, ch√¢m bi·∫øm
    'si√™u ph·∫©m ph·∫ø ph·∫©m', 'best v√£i', 'ƒë·ªânh th·∫≠t s·ª±', 'ƒë·ªânh c·ªßa ch√≥p (m·ªâa mai)', 'ƒë·ªânh cao th·∫•t b·∫°i', 
    'tr√≤ h·ªÅ', 'c·∫°n l·ªùi', 'ai mua l√† d·∫°i', 'ƒë√∫ng l√† tr√≤ h·ªÅ', 'b√°n cho ai v·∫≠y tr·ªùi', 'nh√¨n ph√°t √≥i'
  ];
  
  const lowerContent = content.toLowerCase();
  let hasViolation = false;
  let violationType = null;
  
  // Ki·ªÉm tra t·ª´ kh√≥a c·∫•m
  for (const word of bannedWords) {
    if (lowerContent.includes(word)) {
      hasViolation = true;
      violationType = 'inappropriate_language';
      break;
    }
  }
  
  // Ki·ªÉm tra spam patterns
  if (lowerContent.length > 500 || lowerContent.split(' ').length > 100) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  // Ki·ªÉm tra l·∫∑p l·∫°i k√Ω t·ª±
  if (/(.)\1{5,}/.test(content)) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  // Ki·ªÉm tra URL spam
  const urlPattern = /(https?:\/\/[^\s]+)/g;
  const urls = content.match(urlPattern);
  if (urls && urls.length > 3) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  return {
    isViolation: hasViolation,
    violationType,
    flagged: hasViolation,
    categories: {},
    scores: {},
    source: 'manual_check'
  };
}

// [POST] /api/comments/create
module.exports.create = async (req, res) => {
  console.log("Body nh·∫≠n ƒë∆∞·ª£c:", req.body);
  try {
    const { content, product_id, rating, parent_id } = req.body;
    console.log("User ID:", req.body);
    const user_id = req.user._id; // L·∫•y t·ª´ middleware auth

    console.log("Product ID received:", product_id); // Debug log
    
    // Ki·ªÉm tra t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ ID n√†y (kh√¥ng ph√¢n bi·ªát status)
    const allProducts = await Product.find({ _id: product_id });
    console.log("All products with this ID:", allProducts.length);
    allProducts.forEach(p => {
      console.log("Product:", p.title, "Status:", p.status, "Deleted:", p.deleted);
    });
    
    // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    const product = await Product.findOne({
      _id: product_id,
      deleted: false,
      status: "active"
    });

    console.log("Product found:", product ? product.title : "Not found"); // Debug log

    if (!product) {
      return res.status(404).json({
        success: false,
        message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"
      });
    }

    // Ki·ªÉm tra comment c√≥ vi ph·∫°m hay kh√¥ng
    const violationCheck = checkCommentViolation(content);
    
    // T·∫°o comment m·ªõi v·ªõi k·∫øt qu·∫£ ki·ªÉm tra vi ph·∫°m
    const newComment = new Comment({
      content,
      product_id,
      user_id,
      rating: rating || 5,
      parent_id: parent_id || null,
      status: violationCheck.isViolation ? "inactive" : "active",
      aiModeration: {
        isChecked: true,
        isViolation: violationCheck.isViolation,
        violationType: violationCheck.violationType,
        flagged: violationCheck.flagged,
        categories: violationCheck.categories,
        scores: violationCheck.scores,
        moderatedAt: new Date(),
        source: violationCheck.source
      }
    });

    await newComment.save();

    // Populate th√¥ng tin user
    const commentWithUser = await Comment.findById(newComment._id)
      .populate('user_id', 'fullName');

    // Ki·ªÉm tra n·∫øu comment b·ªã t·ª´ ch·ªëi
    if (violationCheck.isViolation) {
      res.status(201).json({
        success: true,
        message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c t·∫°o nh∆∞ng ƒëang ch·ªù ki·ªÉm duy·ªát do ph√°t hi·ªán n·ªôi dung kh√¥ng ph√π h·ª£p",
        comment: commentWithUser,
        isModerated: true,
        violationType: violationCheck.violationType,
        moderationSource: violationCheck.source
      });
    } else {
      res.status(201).json({
        success: true,
        message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
        comment: commentWithUser,
        moderationSource: violationCheck.source
      });
    }

  } catch (error) {
    console.error("Error creating comment:", error);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi t·∫°o b√¨nh lu·∫≠n",
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// [GET] /api/comments/product/:product_id
module.exports.getByProduct = async (req, res) => {
  try {
    const { product_id } = req.params;
    const { page = 1, limit = 10 } = req.query;

    const skip = (page - 1) * limit;

    // L·∫•y comments c·ªßa s·∫£n ph·∫©m (ch·ªâ comment cha, kh√¥ng l·∫•y reply)
    const comments = await Comment.find({
      product_id,
      parent_id: null,
      deleted: false,
      status: "active"
    })
    .populate('user_id', 'fullName')
    .sort({ createdAt: -1 })
    .skip(skip)
    .limit(parseInt(limit));

    // L·∫•y replies cho m·ªói comment
    for (let comment of comments) {
      const replies = await Comment.find({
        parent_id: comment._id,
        deleted: false,
        status: "active"
      })
      .populate('user_id', 'fullName')
      .sort({ createdAt: 1 });
      
      comment.replies = replies;
    }

    // ƒê·∫øm t·ªïng s·ªë comments
    const total = await Comment.countDocuments({
      product_id,
      parent_id: null,
      deleted: false,
      status: "active"
    });

    res.json({
      success: true,
      comments,
      pagination: {
        current: parseInt(page),
        total: Math.ceil(total / limit),
        totalItems: total
      }
    });

  } catch (error) {
    console.error("Error getting comments:", error);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch b√¨nh lu·∫≠n"
    });
  }
};

// [PUT] /api/comments/:id
module.exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const { content, rating } = req.body;
    const user_id = req.user._id;

    const comment = await Comment.findById(id);

    if (!comment) {
      return res.status(404).json({
        success: false,
        message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i"
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ª≠a (ch·ªâ ng∆∞·ªùi vi·∫øt comment m·ªõi ƒë∆∞·ª£c s·ª≠a)
    if (comment.user_id.toString() !== user_id.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a b√¨nh lu·∫≠n n√†y"
      });
    }

    // C·∫≠p nh·∫≠t comment
    const updatedComment = await Comment.findByIdAndUpdate(
      id,
      {
        content,
        rating: rating || comment.rating
      },
      { new: true }
    ).populate('user_id', 'fullName');

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t b√¨nh lu·∫≠n th√†nh c√¥ng",
      comment: updatedComment
    });

  } catch (error) {
    console.error("Error updating comment:", error);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√¨nh lu·∫≠n"
    });
  }
};

// [DELETE] /api/comments/:id
module.exports.delete = async (req, res) => {
  try {
    const { id } = req.params;
    const user_id = req.user._id;

    const comment = await Comment.findById(id);

    if (!comment) {
      return res.status(404).json({
        success: false,
        message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i"
      });
    }

    // Ki·ªÉm tra quy·ªÅn x√≥a (ch·ªâ ng∆∞·ªùi vi·∫øt comment m·ªõi ƒë∆∞·ª£c x√≥a)
    if (comment.user_id.toString() !== user_id.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√¨nh lu·∫≠n n√†y"
      });
    }

    // X√≥a m·ªÅm comment v√† t·∫•t c·∫£ replies
    await Comment.updateMany(
      { $or: [{ _id: id }, { parent_id: id }] },
      {
        deleted: true,
        deletedAt: new Date(),
        deletedBy: {
          user_id,
          deletedAt: new Date()
        }
      }
    );

    res.json({
      success: true,
      message: "X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng"
    });

  } catch (error) {
    console.error("Error deleting comment:", error);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi x√≥a b√¨nh lu·∫≠n"
    });
  }
};

// [GET] /api/comments/replies/:parent_id
module.exports.getReplies = async (req, res) => {
  try {
    const { parent_id } = req.params;

    const replies = await Comment.find({
      parent_id,
      deleted: false,
      status: "active"
    })
    .populate('user_id', 'fullName')
    .sort({ createdAt: 1 });

    res.json({
      success: true,
      replies
    });

  } catch (error) {
    console.error("Error getting replies:", error);
    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ph·∫£n h·ªìi"
    });
  }
};

// C√°c h√†m AI moderation ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè:
// - getStats
// - resetStats  
// - cleanupCache
