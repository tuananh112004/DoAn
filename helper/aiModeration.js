// const axios = require('axios');

// // Cache ƒë∆°n gi·∫£n ƒë·ªÉ l∆∞u k·∫øt qu·∫£ moderation
// const moderationCache = new Map();
// const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 gi·ªù

// // Th·ªëng k√™ API usage
// let apiStats = {
//   totalCalls: 0,
//   successfulCalls: 0,
//   rateLimitHits: 0,
//   fallbackUsage: 0,
//   cacheHits: 0
// };

// // H√†m ki·ªÉm tra n·ªôi dung comment b·∫±ng AI
// async function moderateComment(content) {
//   apiStats.totalCalls++;
  
//   // T·∫°o key cache t·ª´ n·ªôi dung
//   const cacheKey = content.toLowerCase().trim();
  
//   // Ki·ªÉm tra cache
//   if (moderationCache.has(cacheKey)) {
//     const cached = moderationCache.get(cacheKey);
//     if (Date.now() - cached.timestamp < CACHE_TTL) {
//       console.log("Using cached moderation result");
//       apiStats.cacheHits++;
//       return cached.result;
//     }
//   }
  
//   const maxRetries = 3;
//   const baseDelay = 1000; // 1 gi√¢y
  
//   for (let attempt = 1; attempt <= maxRetries; attempt++) {
//     try {
//       console.log(`Attempt ${attempt} to call external moderation API...`);

//       // Prefer Google AI moderation endpoint if configured. Do NOT call OpenAI.
//       if (!process.env.GOOGLE_API_KEY || !process.env.GOOGLE_AI_ENDPOINT) {
//         console.log('No Google moderation endpoint configured. Skipping external moderation.');
//         break; // exit loop to fallback
//       }

//       const endpoint = process.env.GOOGLE_AI_ENDPOINT;
//       const apiKey = process.env.GOOGLE_API_KEY;

//       // Generic payload - many Google endpoints accept { input } or { content }
//       const payload = { input: content };

//       const response = await axios.post(endpoint, payload, {
//         headers: {
//           'Authorization': `Bearer ${apiKey}`,
//           'Content-Type': 'application/json'
//         },
//         timeout: 15000 // 15s
//       });

//       // Try to normalize response into expected fields
//       const data = response.data || {};
//       // Google-like shapes may vary; attempt commonly-used paths
//       const result = data.results?.[0] || data.output?.[0] || data[0] || data;

//       // If result doesn't have flag info, fallback to simple fallback moderation
//       const categories = result.categories || result.category_scores || {};
//       const flagged = result.flagged || result.flagged === true || false;

//       // Determine violation by scanning categories where true
//       const violationTypes = [
//         'hate', 'hate/threatening', 'self-harm', 'sexual', 
//         'sexual/minors', 'violence', 'violence/graphic'
//       ];
//       let hasViolation = false;
//       let violationType = null;
//       for (const type of violationTypes) {
//         if (categories[type] === true) {
//           hasViolation = true;
//           violationType = type;
//           break;
//         }
//       }

//       const moderationResult = {
//         isViolation: hasViolation,
//         violationType: violationType,
//         flagged: flagged,
//         categories: categories,
//         scores: result.category_scores || {},
//         source: 'google'
//       };

//       moderationCache.set(cacheKey, { result: moderationResult, timestamp: Date.now() });
//       apiStats.successfulCalls++;
//       console.log('External moderation call successful');
//       return moderationResult;

//     } catch (error) {
//       console.error(`Attempt ${attempt} failed:`, error.response?.status, error.response?.data || error.message || error);

//       // If rate limited by external provider, respect retry-after
//       if (error.response?.status === 429) {
//         apiStats.rateLimitHits++;
//         const retryAfter = parseInt(error.response.headers['retry-after']) || baseDelay * attempt;
//         console.log(`Rate limit hit (429). Retrying after ${retryAfter}ms...`);
//         if (attempt < maxRetries) {
//           await new Promise(resolve => setTimeout(resolve, retryAfter));
//           continue;
//         } else {
//           console.log('Max retries reached. Using fallback moderation.');
//           break;
//         }
//       }

//       if (attempt === maxRetries) {
//         console.error('All attempts failed. Using fallback moderation.');
//         break;
//       }

//       const delay = baseDelay * Math.pow(2, attempt - 1);
//       await new Promise(resolve => setTimeout(resolve, delay));
//     }
//   }
  
//   // Fallback n·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i
//   console.log("Using fallback moderation");
//   apiStats.fallbackUsage++;
//   return fallbackModeration(content);
// }

// // Fallback moderation khi kh√¥ng c√≥ API key ho·∫∑c l·ªói
// function fallbackModeration(content) {
//   console.log("Using fallback moderation for:", content.substring(0, 50) + "...");
  
//   const bannedWords = [
//     // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (c√≥ d·∫•u)
//     'ƒë·ªãt', 'ƒë·ª•', 'l·ªìn', 'c·∫∑c', 'ƒë√©o', 'ƒëcm', 'v√£i l*n', 'v√£i l·ªìn', 'vcl', 'loz', 'clgt',
//     'm√° m√†y', 'm·∫π m√†y', 'ƒë·ªì ngu', '√≥c ch√≥', 'n√£o ch√≥', 'ngu v√£i', 'ngu nh∆∞ b√≤', 'ngu nh∆∞ l·ª£n',
  
//     // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (kh√¥ng d·∫•u/l√°ch lu·∫≠t)
//     'dit', 'du', 'lon', 'cac', 'deo', 'dcm', 'vl', 'loz', 'oc cho', 'oc lon', 'oc heo', 'dm', 'cl',
  
//     // üîû Ch·ª≠i t·ª•c ti·∫øng Anh
//     'fuck', 'shit', 'bitch', 'asshole', 'dick', 'pussy', 'bastard', 'slut', 'faggot', 'moron',
  
//     // üö´ Spam, l·ª´a ƒë·∫£o, gian l·∫≠n
//     'spam', 'scam', 'l·ª´a ƒë·∫£o', 'l·ª´a g·∫°t', 'gian th∆∞∆°ng', 'b·ªãp b·ª£m', 'treo ƒë·∫ßu d√™', 'b√°n th·ªãt ch√≥', 'h√†ng fake', 'h√†ng gi·∫£', 'ƒë·∫°o nh√°i',
  
//     // üëé Ch√™ bai s·∫£n ph·∫©m n·∫∑ng
//     'r√°c', 'r√°c r∆∞·ªüi', 'ƒë·ªì b·ªè ƒëi', 'ph·∫ø ph·∫©m', 'ƒë·ªì ƒë·ªÉu', 'h√†ng l·ªüm', 't·ªá', 'qu√° t·ªá', 'c·ª±c k·ª≥ t·ªá', 
//     'k√©m ch·∫•t l∆∞·ª£ng', 'kh√¥ng ra g√¨', 'kh√¥ng x·ª©ng ƒë√°ng', 'r·∫ª ti·ªÅn', 'kh√¥ng ƒë√°ng ti·ªÅn', 'ph√≠ ti·ªÅn',
//     'd·ªü ·∫πc', 'ch√°n', 'v·ªõ v·∫©n', 'x·∫•u v√£i', 'x·∫•u v√£i l', 'x·∫•u nh∆∞ ch√≥', 'x·∫•u nh∆∞ cc', 'x·∫•u kinh t·ªüm',
//     'bu·ªìn n√¥n', 'th·∫£m h·ªça', 'thi·∫øt k·∫ø nh∆∞ ƒë√πa', 'ƒë·ªânh cao c·ªßa t·ªá h·∫°i', 's·∫£n ph·∫©m c·ªßa tr√≤ ƒë√πa',
//     'mua 1 l·∫ßn ch·ª´a c·∫£ ƒë·ªùi', 'ti·ªÅn m·∫•t t·∫≠t mang', 'nh∆∞ c·ª©c', 'nh∆∞ c·ª©t', 'nh∆∞ cc', 'nh∆∞ loz', 'nh∆∞ l',
//     'h√£m l', 'h√£m v√£i', 'th·∫•t v·ªçng', 'c·ª±c k·ª≥ th·∫•t v·ªçng', 'kh√°c m√¥ t·∫£', 'kh√°c xa th·ª±c t·∫ø',
  
//     // ü§° M·ªâa mai, ch√¢m bi·∫øm
//     'si√™u ph·∫©m ph·∫ø ph·∫©m', 'best v√£i', 'ƒë·ªânh th·∫≠t s·ª±', 'ƒë·ªânh c·ªßa ch√≥p (m·ªâa mai)', 'ƒë·ªânh cao th·∫•t b·∫°i', 
//     'tr√≤ h·ªÅ', 'c·∫°n l·ªùi', 'ai mua l√† d·∫°i', 'ƒë√∫ng l√† tr√≤ h·ªÅ', 'b√°n cho ai v·∫≠y tr·ªùi', 'nh√¨n ph√°t √≥i'
//   ];
  
//   const lowerContent = content.toLowerCase();
//   let hasViolation = false;
//   let violationType = null;
  
//   // Ki·ªÉm tra t·ª´ kh√≥a c·∫•m
//   for (const word of bannedWords) {
//     if (lowerContent.includes(word)) {
//       hasViolation = true;
//       violationType = 'inappropriate_language';
//       break;
//     }
//   }
  
//   // Ki·ªÉm tra spam patterns
//   if (lowerContent.length > 500 || lowerContent.split(' ').length > 100) {
//     hasViolation = true;
//     violationType = 'spam';
//   }
  
//   // Ki·ªÉm tra l·∫∑p l·∫°i k√Ω t·ª±
//   if (/(.)\1{5,}/.test(content)) {
//     hasViolation = true;
//     violationType = 'spam';
//   }
  
//   // Ki·ªÉm tra URL spam
//   const urlPattern = /(https?:\/\/[^\s]+)/g;
//   const urls = content.match(urlPattern);
//   if (urls && urls.length > 3) {
//     hasViolation = true;
//     violationType = 'spam';
//   }
  
//   return {
//     isViolation: hasViolation,
//     violationType: violationType,
//     flagged: hasViolation,
//     categories: {},
//     scores: {},
//     source: 'fallback'
//   };
// }

// // H√†m x√≥a cache c≈©
// function cleanupCache() {
//   const now = Date.now();
//   for (const [key, value] of moderationCache.entries()) {
//     if (now - value.timestamp > CACHE_TTL) {
//       moderationCache.delete(key);
//     }
//   }
//   console.log(`Cache cleaned up. Current size: ${moderationCache.size}`);
// }

// // T·ª± ƒë·ªông cleanup cache m·ªói gi·ªù
// setInterval(cleanupCache, 60 * 60 * 1000);

// // H√†m reset stats
// function resetStats() {
//   apiStats = {
//     totalCalls: 0,
//     successfulCalls: 0,
//     rateLimitHits: 0,
//     fallbackUsage: 0,
//     cacheHits: 0
//   };
// }

// module.exports = {
//   moderateComment,
//   getStats: () => ({ ...apiStats }),
//   resetStats,
//   cleanupCache
// }; 
const axios = require('axios');

// Cache ƒë∆°n gi·∫£n ƒë·ªÉ l∆∞u k·∫øt qu·∫£ moderation
const moderationCache = new Map();
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 gi·ªù

// Th·ªëng k√™ API usage
let apiStats = {
  totalCalls: 0,
  successfulCalls: 0,
  rateLimitHits: 0,
  fallbackUsage: 0,
  cacheHits: 0
};

// H√†m ki·ªÉm tra n·ªôi dung comment b·∫±ng AI (Gemini)
async function moderateComment(content) {
  apiStats.totalCalls++;
  
  // T·∫°o key cache t·ª´ n·ªôi dung
  const cacheKey = content.toLowerCase().trim();
  
  // Ki·ªÉm tra cache
  if (moderationCache.has(cacheKey)) {
    const cached = moderationCache.get(cacheKey);
    if (Date.now() - cached.timestamp < CACHE_TTL) {
      console.log("Using cached moderation result");
      apiStats.cacheHits++;
      return cached.result;
    }
  }
  
  const maxRetries = 3;
  const baseDelay = 1000; // 1 gi√¢y
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`Attempt ${attempt} to call Gemini moderation API...`);

      if (!process.env.GOOGLE_API_KEY) {
        console.log('No Google API key configured. Skipping external moderation.');
        break; // fallback lu√¥n
      }

      const apiKey = process.env.GOOGLE_API_KEY;

      // ‚úÖ Payload chu·∫©n cho Gemini moderation API
      const payload = {
        input: [{ text: content }]
      };

      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:moderateText?key=${apiKey}`,
        payload,
        {
          headers: { 'Content-Type': 'application/json' },
          timeout: 15000
        }
      );

      // ‚úÖ Chu·∫©n ho√° k·∫øt qu·∫£ response
      const moderation = response.data.moderationResponse || {};
      const categories = moderation.categories || {};
      const scores = moderation.scores || {};
      const flagged = moderation.blocked || false;

      // T√¨m lo·∫°i vi ph·∫°m (n·∫øu c√≥)
      let violationType = null;
      for (const [key, value] of Object.entries(categories)) {
        if (value === true) {
          violationType = key;
          break;
        }
      }

      const moderationResult = {
        isViolation: flagged || !!violationType,
        violationType: violationType,
        flagged: flagged,
        categories,
        scores,
        source: 'google'
      };

      moderationCache.set(cacheKey, { result: moderationResult, timestamp: Date.now() });
      apiStats.successfulCalls++;
      console.log('Gemini moderation call successful');
      return moderationResult;

    } catch (error) {
      console.error(`Attempt ${attempt} failed:`, error.response?.status, error.response?.data || error.message);

      // N·∫øu b·ªã rate limit
      if (error.response?.status === 429) {
        apiStats.rateLimitHits++;
        const retryAfter = parseInt(error.response.headers['retry-after']) || baseDelay * attempt;
        console.log(`Rate limit hit (429). Retrying after ${retryAfter}ms...`);
        if (attempt < maxRetries) {
          await new Promise(resolve => setTimeout(resolve, retryAfter));
          continue;
        } else {
          console.log('Max retries reached. Using fallback moderation.');
          break;
        }
      }

      if (attempt === maxRetries) {
        console.error('All attempts failed. Using fallback moderation.');
        break;
      }

      const delay = baseDelay * Math.pow(2, attempt - 1);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  // Fallback n·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i
  console.log("Using fallback moderation");
  apiStats.fallbackUsage++;
  return fallbackModeration(content);
}

// Fallback moderation khi kh√¥ng c√≥ API key ho·∫∑c l·ªói
function fallbackModeration(content) {
  console.log("Using fallback moderation for:", content.substring(0, 50) + "...");
  
  const bannedWords = [
    // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát
    'ƒë·ªãt', 'ƒë·ª•', 'l·ªìn', 'c·∫∑c', 'ƒë√©o', 'ƒëcm', 'v√£i l*n', 'v√£i l·ªìn', 'vcl', 'loz', 'clgt',
    'm√° m√†y', 'm·∫π m√†y', 'ƒë·ªì ngu', '√≥c ch√≥', 'n√£o ch√≥', 'ngu v√£i', 'ngu nh∆∞ b√≤', 'ngu nh∆∞ l·ª£n',
    // üîû Kh√¥ng d·∫•u
    'dit', 'du', 'lon', 'cac', 'deo', 'dcm', 'vl', 'loz', 'oc cho', 'dm', 'cl',
    // üîû Ti·∫øng Anh
    'fuck', 'shit', 'bitch', 'asshole', 'dick', 'pussy', 'bastard', 'slut', 'faggot', 'moron',
    // üö´ Spam, l·ª´a ƒë·∫£o
    'spam', 'scam', 'l·ª´a ƒë·∫£o', 'l·ª´a g·∫°t', 'h√†ng fake', 'h√†ng gi·∫£',
    // üëé Ch√™ bai s·∫£n ph·∫©m
    'r√°c', 'r√°c r∆∞·ªüi', 'ƒë·ªì b·ªè ƒëi', 't·ªá', 'qu√° t·ªá', 'c·ª±c k·ª≥ t·ªá', 
    'k√©m ch·∫•t l∆∞·ª£ng', 'kh√¥ng ƒë√°ng ti·ªÅn', 'ph√≠ ti·ªÅn', 'd·ªü ·∫πc', 'ch√°n', 
    'v·ªõ v·∫©n', 'x·∫•u v√£i', 'x·∫•u nh∆∞ ch√≥', 'th·∫•t v·ªçng', 'c·ª±c k·ª≥ th·∫•t v·ªçng'
  ];
  
  const lowerContent = content.toLowerCase();
  let hasViolation = false;
  let violationType = null;
  
  for (const word of bannedWords) {
    if (lowerContent.includes(word)) {
      hasViolation = true;
      violationType = 'inappropriate_language';
      break;
    }
  }
  
  if (lowerContent.length > 500 || lowerContent.split(' ').length > 100) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  if (/(.)\1{5,}/.test(content)) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  const urlPattern = /(https?:\/\/[^\s]+)/g;
  const urls = content.match(urlPattern);
  if (urls && urls.length > 3) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  return {
    isViolation: hasViolation,
    violationType,
    flagged: hasViolation,
    categories: {},
    scores: {},
    source: 'fallback'
  };
}

// H√†m x√≥a cache c≈©
function cleanupCache() {
  const now = Date.now();
  for (const [key, value] of moderationCache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      moderationCache.delete(key);
    }
  }
  console.log(`Cache cleaned up. Current size: ${moderationCache.size}`);
}

// T·ª± ƒë·ªông cleanup cache m·ªói gi·ªù
setInterval(cleanupCache, 60 * 60 * 1000);

// H√†m reset stats
function resetStats() {
  apiStats = {
    totalCalls: 0,
    successfulCalls: 0,
    rateLimitHits: 0,
    fallbackUsage: 0,
    cacheHits: 0
  };
}

module.exports = {
  moderateComment,
  getStats: () => ({ ...apiStats }),
  resetStats,
  cleanupCache
};
