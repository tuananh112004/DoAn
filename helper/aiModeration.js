const axios = require('axios');

// Cache ƒë∆°n gi·∫£n ƒë·ªÉ l∆∞u k·∫øt qu·∫£ moderation
const moderationCache = new Map();
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 gi·ªù

// Th·ªëng k√™ API usage
let apiStats = {
  totalCalls: 0,
  successfulCalls: 0,
  rateLimitHits: 0,
  fallbackUsage: 0,
  cacheHits: 0
};

// H√†m ki·ªÉm tra n·ªôi dung comment b·∫±ng AI
async function moderateComment(content) {
  apiStats.totalCalls++;
  
  // T·∫°o key cache t·ª´ n·ªôi dung
  const cacheKey = content.toLowerCase().trim();
  
  // Ki·ªÉm tra cache
  if (moderationCache.has(cacheKey)) {
    const cached = moderationCache.get(cacheKey);
    if (Date.now() - cached.timestamp < CACHE_TTL) {
      console.log("Using cached moderation result");
      apiStats.cacheHits++;
      return cached.result;
    }
  }
  
  const maxRetries = 3;
  const baseDelay = 1000; // 1 gi√¢y
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`Attempt ${attempt} to call OpenAI API...`);
      
      // S·ª≠ d·ª•ng OpenAI API ƒë·ªÉ ki·ªÉm tra n·ªôi dung
      const response = await axios.post('https://api.openai.com/v1/moderations', {
        model: "omni-moderation-latest",
        input: content
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000 // 15 gi√¢y timeout
      });
      
      const result = response.data.results[0];
      
      // Ki·ªÉm tra c√°c flag vi ph·∫°m
      const flags = result.flags;
      const categories = result.categories;
      
      // Danh s√°ch c√°c lo·∫°i vi ph·∫°m c·∫ßn ki·ªÉm tra
      const violationTypes = [
        'hate', 'hate/threatening', 'self-harm', 'sexual', 
        'sexual/minors', 'violence', 'violence/graphic'
      ];
      
      let hasViolation = false;
      let violationType = null;
      
      // Ki·ªÉm tra t·ª´ng lo·∫°i vi ph·∫°m
      for (const type of violationTypes) {
        if (categories[type] === true) {
          hasViolation = true;
          violationType = type;
          break;
        }
      }
      
      const moderationResult = {
        isViolation: hasViolation,
        violationType: violationType,
        flagged: result.flagged,
        categories: categories,
        scores: result.category_scores,
        source: 'openai'
      };
      
      // L∆∞u v√†o cache
      moderationCache.set(cacheKey, {
        result: moderationResult,
        timestamp: Date.now()
      });
      
      apiStats.successfulCalls++;
      console.log("OpenAI API call successful");
      
      return moderationResult;
      
    } catch (error) {
      console.error(`Attempt ${attempt} failed:`, error.response?.status, error.response?.data?.error?.message);
      
      // X·ª≠ l√Ω l·ªói rate limit
      if (error.response?.status === 429) {
        apiStats.rateLimitHits++;
        const retryAfter = parseInt(error.response.headers['retry-after']) || baseDelay * attempt;
        console.log(`Rate limit hit (Too Many Requests). Retrying after ${retryAfter}ms...`);
        
        if (attempt < maxRetries) {
          await new Promise(resolve => setTimeout(resolve, retryAfter));
          continue;
        } else {
          console.log("Max retries reached. Using fallback moderation.");
          break;
        }
      }
      
      // X·ª≠ l√Ω c√°c l·ªói kh√°c
      if (attempt === maxRetries) {
        console.error("All attempts failed. Using fallback moderation.");
        break;
      }
      
      // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i v·ªõi exponential backoff
      const delay = baseDelay * Math.pow(2, attempt - 1);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  // Fallback n·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i
  console.log("Using fallback moderation");
  apiStats.fallbackUsage++;
  return fallbackModeration(content);
}

// Fallback moderation khi kh√¥ng c√≥ API key ho·∫∑c l·ªói
function fallbackModeration(content) {
  console.log("Using fallback moderation for:", content.substring(0, 50) + "...");
  
  const bannedWords = [
    // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (c√≥ d·∫•u)
    'ƒë·ªãt', 'ƒë·ª•', 'l·ªìn', 'c·∫∑c', 'ƒë√©o', 'ƒëcm', 'v√£i l*n', 'v√£i l·ªìn', 'vcl', 'loz', 'clgt',
    'm√° m√†y', 'm·∫π m√†y', 'ƒë·ªì ngu', '√≥c ch√≥', 'n√£o ch√≥', 'ngu v√£i', 'ngu nh∆∞ b√≤', 'ngu nh∆∞ l·ª£n',
  
    // üîû Ch·ª≠i t·ª•c ti·∫øng Vi·ªát (kh√¥ng d·∫•u/l√°ch lu·∫≠t)
    'dit', 'du', 'lon', 'cac', 'deo', 'dcm', 'vl', 'loz', 'oc cho', 'oc lon', 'oc heo', 'dm', 'cl',
  
    // üîû Ch·ª≠i t·ª•c ti·∫øng Anh
    'fuck', 'shit', 'bitch', 'asshole', 'dick', 'pussy', 'bastard', 'slut', 'faggot', 'moron',
  
    // üö´ Spam, l·ª´a ƒë·∫£o, gian l·∫≠n
    'spam', 'scam', 'l·ª´a ƒë·∫£o', 'l·ª´a g·∫°t', 'gian th∆∞∆°ng', 'b·ªãp b·ª£m', 'treo ƒë·∫ßu d√™', 'b√°n th·ªãt ch√≥', 'h√†ng fake', 'h√†ng gi·∫£', 'ƒë·∫°o nh√°i',
  
    // üëé Ch√™ bai s·∫£n ph·∫©m n·∫∑ng
    'r√°c', 'r√°c r∆∞·ªüi', 'ƒë·ªì b·ªè ƒëi', 'ph·∫ø ph·∫©m', 'ƒë·ªì ƒë·ªÉu', 'h√†ng l·ªüm', 't·ªá', 'qu√° t·ªá', 'c·ª±c k·ª≥ t·ªá', 
    'k√©m ch·∫•t l∆∞·ª£ng', 'kh√¥ng ra g√¨', 'kh√¥ng x·ª©ng ƒë√°ng', 'r·∫ª ti·ªÅn', 'kh√¥ng ƒë√°ng ti·ªÅn', 'ph√≠ ti·ªÅn',
    'd·ªü ·∫πc', 'ch√°n', 'v·ªõ v·∫©n', 'x·∫•u v√£i', 'x·∫•u v√£i l', 'x·∫•u nh∆∞ ch√≥', 'x·∫•u nh∆∞ cc', 'x·∫•u kinh t·ªüm',
    'bu·ªìn n√¥n', 'th·∫£m h·ªça', 'thi·∫øt k·∫ø nh∆∞ ƒë√πa', 'ƒë·ªânh cao c·ªßa t·ªá h·∫°i', 's·∫£n ph·∫©m c·ªßa tr√≤ ƒë√πa',
    'mua 1 l·∫ßn ch·ª´a c·∫£ ƒë·ªùi', 'ti·ªÅn m·∫•t t·∫≠t mang', 'nh∆∞ c·ª©c', 'nh∆∞ c·ª©t', 'nh∆∞ cc', 'nh∆∞ loz', 'nh∆∞ l',
    'h√£m l', 'h√£m v√£i', 'th·∫•t v·ªçng', 'c·ª±c k·ª≥ th·∫•t v·ªçng', 'kh√°c m√¥ t·∫£', 'kh√°c xa th·ª±c t·∫ø',
  
    // ü§° M·ªâa mai, ch√¢m bi·∫øm
    'si√™u ph·∫©m ph·∫ø ph·∫©m', 'best v√£i', 'ƒë·ªânh th·∫≠t s·ª±', 'ƒë·ªânh c·ªßa ch√≥p (m·ªâa mai)', 'ƒë·ªânh cao th·∫•t b·∫°i', 
    'tr√≤ h·ªÅ', 'c·∫°n l·ªùi', 'ai mua l√† d·∫°i', 'ƒë√∫ng l√† tr√≤ h·ªÅ', 'b√°n cho ai v·∫≠y tr·ªùi', 'nh√¨n ph√°t √≥i'
  ];
  
  const lowerContent = content.toLowerCase();
  let hasViolation = false;
  let violationType = null;
  
  // Ki·ªÉm tra t·ª´ kh√≥a c·∫•m
  for (const word of bannedWords) {
    if (lowerContent.includes(word)) {
      hasViolation = true;
      violationType = 'inappropriate_language';
      break;
    }
  }
  
  // Ki·ªÉm tra spam patterns
  if (lowerContent.length > 500 || lowerContent.split(' ').length > 100) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  // Ki·ªÉm tra l·∫∑p l·∫°i k√Ω t·ª±
  if (/(.)\1{5,}/.test(content)) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  // Ki·ªÉm tra URL spam
  const urlPattern = /(https?:\/\/[^\s]+)/g;
  const urls = content.match(urlPattern);
  if (urls && urls.length > 3) {
    hasViolation = true;
    violationType = 'spam';
  }
  
  return {
    isViolation: hasViolation,
    violationType: violationType,
    flagged: hasViolation,
    categories: {},
    scores: {},
    source: 'fallback'
  };
}

// H√†m x√≥a cache c≈©
function cleanupCache() {
  const now = Date.now();
  for (const [key, value] of moderationCache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      moderationCache.delete(key);
    }
  }
  console.log(`Cache cleaned up. Current size: ${moderationCache.size}`);
}

// T·ª± ƒë·ªông cleanup cache m·ªói gi·ªù
setInterval(cleanupCache, 60 * 60 * 1000);

// H√†m reset stats
function resetStats() {
  apiStats = {
    totalCalls: 0,
    successfulCalls: 0,
    rateLimitHits: 0,
    fallbackUsage: 0,
    cacheHits: 0
  };
}

module.exports = {
  moderateComment,
  getStats: () => ({ ...apiStats }),
  resetStats,
  cleanupCache
}; 